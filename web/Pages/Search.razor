@page "/search/{searchQuery}"

@using System.Net.Http.Json
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json.Linq

@inject HttpClient httpClient
@inject IConfiguration config

<h1>Search</h1>

<div>
    <label for="searchInput">Search:</label>
    <input type="text" id="searchInput" @bind-value="searchQuery" />
    <button @onclick="async () => await LoadPage(1)">Search</button>
</div>

@if (searchResults == null)
{
    <p>Loading...</p>
}
else if (searchResults.Count == 0)
{
    <p>No results found.</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in searchResults)
            {
                <tr>
                    <td><img src="@result.ThumbnailUrl" /></td>
                    <td>@result.Name</td>
                    <td>@result.Description</td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <button disabled="@currentPage == 1" @onclick="() => LoadPage(currentPage - 1)">Previous</button>
        <button disabled="@currentPage == totalPages" @onclick="() => LoadPage(currentPage + 1)">Next</button>
    </div>
}

@code {
    private List<SearchResult> searchResults;
    private int currentPage = 1;
    private int totalPages;
    private string searchQuery;
    private readonly int pageSize = 10;
    private string apiKey;
    private string endpoint;

    private class SearchResult
    {
        public string ThumbnailUrl { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        apiKey = config["CognitiveServices:ApiKey"];
        endpoint = config["CognitiveServices:Endpoint"];
        httpClient.DefaultRequestHeaders.Add("api-key", apiKey);
        
        await LoadPage(1);
    }

    private async Task LoadPage(int page)
    {
 
        var response = await httpClient.GetAsync($"{endpoint}/bing/v7.0/images/search?q={searchQuery}&count={pageSize}&offset={(page - 1) * pageSize}&mkt=en-us&safeSearch=Strict");
        response.EnsureSuccessStatusCode();

        var json = await response.Content.ReadAsStringAsync();
        var results = JObject.Parse(json)["value"].ToObject<List<SearchResult>>();
        searchResults = results;
        totalPages = (int)Math.Ceiling(Convert.ToDouble(response.Headers.GetValues("X-Search-Total-Count").First()) / pageSize);
        currentPage = page;
    }
}
